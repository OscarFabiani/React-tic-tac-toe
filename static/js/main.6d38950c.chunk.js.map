{"version":3,"sources":["index.js"],"names":["Square","_ref","position","value","handleClick","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onClick","JumpButton","_ref2","move","jumpTo","desc","Board","_ref3","squares","squareRendersKey","squareRenders","Array","fill","map","_","i","key","Game","state","history","xIsNext","_this","slice","length","calculateWinner","setState","concat","_this2","this","current","winner","jumpButtonRendersKey","jumpButtonRenders","React","Component","forEach","line","every","v","ReactDOM","render","document","getElementById"],"mappings":"6NAKMA,SAAS,SAAAC,GAAoC,IAAlCC,EAAkCD,EAAlCC,SAAUC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,YAWhC,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,QAJb,WACdL,EAAYF,KAITC,KAKDO,EAAa,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,OACnBC,EAAOF,EAAO,eAAiBA,EAAO,mBAI5C,OACEP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQE,QALQ,WAClBI,EAAOD,KAI0BE,KAK/BC,EAAQ,SAAAC,GAA4B,IAA1BC,EAA0BD,EAA1BC,QAASb,EAAiBY,EAAjBZ,YACnBc,EAAmB,EACjBC,EAAgBC,MAAM,GAAGC,KAAK,MAAMC,IAAI,SAACC,EAAGC,GAAJ,OAC5CnB,EAAAC,EAAAC,cAACP,EAAD,CACEyB,IAAKP,IACLhB,SAAUsB,EACVrB,MAAOc,EAAQO,GACfpB,YAAaA,MAGjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZW,IAKHO,6MACJC,MAAQ,CACNC,QAAS,CAAC,CACRX,QAASG,MAAM,GAAGC,KAAK,QAEzBT,KAAM,EACNiB,SAAS,KAGXzB,YAAc,SAACoB,GACb,IAAMI,EAAUE,EAAKH,MAAMC,QAAQG,MAAM,EAAGD,EAAKH,MAAMf,KAAO,GAExDK,EADUW,EAAQA,EAAQI,OAAS,GACjBf,QAAQc,QAC5BE,EAAgBhB,IAAYA,EAAQO,KAIxCP,EAAQO,GAAKM,EAAKH,MAAME,QAAU,IAAM,IACxCC,EAAKI,SAAS,CACZN,QAASA,EAAQO,OAAO,CAAC,CACvBlB,QAASA,KAEXL,KAAMgB,EAAQI,OACdH,SAAUC,EAAKH,MAAME,cAIzBhB,OAAS,SAACD,GACRkB,EAAKI,SAAS,CAGZtB,KAAMA,EACNiB,QAAUjB,EAAO,IAAO,6EAInB,IAAAwB,EAAAC,KACDT,EAAUS,KAAKV,MAAMC,QACrBU,EAAUV,EAAQS,KAAKV,MAAMf,MAC7B2B,EAASN,EAAgBK,EAAQrB,SAEnCuB,EAAuB,EACrBC,EAAoBb,EAAQN,IAAI,SAACC,EAAGC,GACxC,OACInB,EAAAC,EAAAC,cAACG,EAAD,CACEe,IAAKe,IACL5B,KAAMY,EACNX,OAAQuB,EAAKvB,WAIrB,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKgC,EAAS,WAAaA,EAAS,iBAAmBF,KAAKV,MAAME,QAAU,IAAM,MAClFxB,EAAAC,EAAAC,cAACQ,EAAD,CACEE,QAASqB,EAAQrB,QACjBb,YAAaiC,KAAKjC,cAEpBC,EAAAC,EAAAC,cAAA,UACGkC,WA3DQC,IAAMC,WAyEzB,SAASV,EAAgBhB,GACvB,IAGIsB,EAAS,KAEb,MALc,CACZ,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAGhFK,QAAQ,SAAAC,GAAI,OAAI5B,EAAQ4B,EAAK,KAAQA,EAAKC,MAAM,SAAAC,GAAC,OAAI9B,EAAQ4B,EAAK,MAAQ5B,EAAQ8B,KAAOR,EAAStB,EAAQ4B,EAAK,IAAK,OACnHN,EAZTS,IAASC,OACP5C,EAAAC,EAAAC,cAACmB,EAAD,MACAwB,SAASC,eAAe","file":"static/js/main.6d38950c.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\n\r\n\r\nconst Square = ({position, value, handleClick}) => {\r\n  //This seems to be a bad practice though it also seems to allow me to forgo the use of\r\n  //binding in the Board component's render. The reason this is bad practice is because\r\n  //this component will recreate the handler on every re-render. Maybe I can use useCallback \r\n  //which “returns a memoized version of the callback that only changes if one of the inputs\r\n  //has changed. This is useful when passing callbacks to optimized child components that rely\r\n  //on reference equality to prevent unnecessary renders.” This 'hook' seems to be included\r\n  //in create-react-app of of now(03/30/19), but doesn't seem to be working.\r\n  const onClick = () => {\r\n    handleClick(position);\r\n  }\r\n  return (\r\n    <button className=\"square\" onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nconst JumpButton = ({move, jumpTo}) => {\r\n  const desc = move ? 'Go to move #' + move : 'Go to game start';\r\n  const handleClick = () => {\r\n    jumpTo(move);\r\n  }\r\n  return (\r\n    <li>\r\n      <button onClick={handleClick}>{desc}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nconst Board = ({squares, handleClick}) => {\r\n  let squareRendersKey = 0;\r\n  const squareRenders = Array(9).fill(null).map((_, i) =>\r\n    <Square\r\n      key={squareRendersKey++}\r\n      position={i}\r\n      value={squares[i]}\r\n      handleClick={handleClick}\r\n    />\r\n  );\r\n  return (\r\n      <div className='game-board'>\r\n        {squareRenders}\r\n      </div>\r\n  );\r\n}\r\n\r\nclass Game extends React.Component {\r\n  state = {\r\n    history: [{\r\n      squares: Array(9).fill(null),\r\n    }],\r\n    move: 0,\r\n    xIsNext: true,\r\n  };\r\n\r\n  handleClick = (i) => {\r\n    const history = this.state.history.slice(0, this.state.move + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n      move: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo = (move) => {\r\n    this.setState({\r\n      //This would update the jump buttons by updating the history to forget the steps following the jumped-to step.\r\n      //history: this.state.history.slice(0, step + 1),\r\n      move: move,\r\n      xIsNext: (move % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.move];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    let jumpButtonRendersKey = 0;\r\n    const jumpButtonRenders = history.map((_, i) => {\r\n      return (\r\n          <JumpButton\r\n            key={jumpButtonRendersKey++}\r\n            move={i}\r\n            jumpTo={this.jumpTo}/>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h3>{winner ? 'Winner: ' + winner : 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')}</h3>\r\n        <Board\r\n          squares={current.squares}\r\n          handleClick={this.handleClick}\r\n        />\r\n        <ul>\r\n          {jumpButtonRenders}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\n//Try to refactor\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6],\r\n  ];\r\n  let winner = null;\r\n  lines.forEach(line => squares[line[0]] && (line.every(v => squares[line[0]] === squares[v])) ? winner = squares[line[0]]: null);\r\n  return winner;\r\n}\r\n\r\n//example calculateWinner logic(currently better than my best)\r\n/*\r\nfor (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n//This is the Square and Board components utilizing an arrow function in the rendering of Square components\r\n//as opposed to binding the handleClick methods and adding a function to the Square component which passes an\r\n//additional prop passed down from the Board component.\r\n//I'm not yet sure which method is best in this situation.\r\n/*\r\nconst Square = ({value, onClick}) => {\r\n  return (\r\n    <button className=\"square\" onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  state = {\r\n    squares: Array(9).fill(null),\r\n    xIsNext: true,\r\n  };\r\n  //NO BINDING HERE\r\n  handleClick(i) {\r\n    const squares = this.state.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      squares: squares,\r\n      xIsNext: !this.state.xIsNext,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const winner = calculateWinner(this.state.squares);\r\n    const squareRenders = this.state.squares.map((_, i) =>\r\n      <Square\r\n        key={i}\r\n        place={i}\r\n        value={this.state.squares[i]}\r\n        //ARROW FUNCTION USED TO PASS 'i'\r\n        onClick={() => this.handleClick(i)}\r\n      />\r\n    );\r\n    return (\r\n      <div>\r\n        <h3>{winner ? 'Winner: ' + winner : 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')}</h3>\r\n        <div className='game-board'>\r\n          {squareRenders}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/\r\n\r\n//This logic was placed within the render method of the Board component and was removed in\r\n//favor of being implemented as a method of the Board comonent.\r\n/*\r\nconst squareRenders = this.state.squares.map((_, i) =>\r\n      <Square\r\n        key={i}\r\n        position={i}\r\n        value={this.state.squares[i]}\r\n        onClick={this.handleClick}\r\n      />\r\n    );\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n//CONTINUE TO REFACTOR AND COMPARE"],"sourceRoot":""}